diff --git a/fs/proc/base.c b/fs/proc/base.c
index 9e479d7..bf8985b 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -635,6 +635,13 @@ static int proc_pid_limits(struct seq_file *m, struct pid_namespace *ns,
 	return 0;
 }
 
+static int proc_pid_ctx(struct seq_file *m, struct pid_namespace *ns,
+			struct pid *pid, struct task_struct *task)
+{
+	seq_put_decimal_ll(m, "scheduled times: ", task->ctx);
+	return 0;
+}
+
 #ifdef CONFIG_HAVE_ARCH_TRACEHOOK
 static int proc_pid_syscall(struct seq_file *m, struct pid_namespace *ns,
 			    struct pid *pid, struct task_struct *task)
@@ -3249,6 +3256,7 @@ static const struct pid_entry tgid_base_stuff[] = {
 	ONE("status",     S_IRUGO, proc_pid_status),
 	ONE("personality", S_IRUSR, proc_pid_personality),
 	ONE("limits",	  S_IRUGO, proc_pid_limits),
+	ONE("ctx",		  S_IRUGO, proc_pid_ctx),
 #ifdef CONFIG_SCHED_DEBUG
 	REG("sched",      S_IRUGO|S_IWUSR, proc_pid_sched_operations),
 #endif
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 853d08f..31b876f 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -860,6 +860,8 @@ struct task_struct {
 #endif /* #ifdef CONFIG_TASKS_TRACE_RCU */
 
 	struct sched_info		sched_info;
+	/* record times we are scheduled*/
+	int 					ctx;
 
 	struct list_head		tasks;
 #ifdef CONFIG_SMP
diff --git a/kernel/fork.c b/kernel/fork.c
index 8dd0127..bda7f9a 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -1835,6 +1835,7 @@ static inline void rcu_copy_process(struct task_struct *p)
 #ifdef CONFIG_TASKS_TRACE_RCU
 	p->trc_reader_nesting = 0;
 	p->trc_reader_special.s = 0;
+	p->ctx = 0;
 	INIT_LIST_HEAD(&p->trc_holdout_list);
 	INIT_LIST_HEAD(&p->trc_blkd_node);
 #endif /* #ifdef CONFIG_TASKS_TRACE_RCU */
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 9a06983..081792e 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -6608,6 +6608,9 @@ static void __sched notrace __schedule(unsigned int sched_mode)
 
 		trace_sched_switch(sched_mode & SM_MASK_PREEMPT, prev, next, prev_state);
 
+		/* Add count of ctx */
+		next->ctx++;
+
 		/* Also unlocks the rq: */
 		rq = context_switch(rq, prev, next, &rf);
 	} else {
